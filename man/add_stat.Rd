% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_stat.R
\name{add_stat}
\alias{add_stat}
\title{Add a custom statistic column}
\usage{
add_stat(
  x,
  fns,
  fmt_fun = NULL,
  header = NULL,
  footnote = NULL,
  location = NULL,
  new_col_name = NULL
)
}
\arguments{
\item{x}{\code{tbl_summary} or \code{tbl_svysummary} object}

\item{fns}{list of formulas indicating the functions that create the statistic.
See details below.}

\item{fmt_fun}{for numeric statistics, \verb{fmt_fun=} is the styling/formatting
function. When multiple columns are added, supply a list of styling functions.}

\item{header}{Column header of new column(s). Default is \code{"**Statistic**"}
when a single column is returned; otherwise, the column name.}

\item{footnote}{Footnote associated with new column. Supply vector of footnotes
if more than one column added.}

\item{location}{list of formulas indicating the location the new statistics
are placed. The RHS of the formula must be one of \code{c("label", "level", "missing")}.
When \code{"label"} a single statistic
is placed on the variable label row. When \code{"level"} the statistics are placed
on the variable level rows. The length of the vector of statistics returned from the
\code{fns} function must match the dimension of levels. Default is to place the
new statistics on the label row.}

\item{new_col_name}{DEPRECATED. name of new column to be created in \code{.$table_body}.
Default is \code{"add_stat_1"}, unless that column exists then it is \code{"add_stat_2"}, etc.}
}
\description{
\lifecycle{experimental}
The function allows a user to add a new column (or columns) of statistics to an
existing \code{tbl_summary} or \code{tbl_svysummary} object.
}
\section{Details}{


The returns from custom functions passed in \verb{fns=} are required to follow a
specified format. Each of these function will execute on a single variable from
\code{tbl_summary()}/\code{tbl_svysummary()}.
\enumerate{
\item Each function must return a tibble or a vector. If a vector is returned,
it will be converted to a tibble with one column and number of rows equal
to the length of the vector.
\item When \code{location = "label"}, the returned statistic from the custom function
must be a tibble with one row. When \code{location = "level"} the tibble must have
the same number of rows as there are levels in the variable (excluding the
row for unknown values).
\item Each function may take the following arguments: \code{foo(data, variable, by, tbl, ...)}
\itemize{
\item \verb{data=} is the input data frame passed to \code{tbl_summary()}
\item \verb{variable=} is a string indicating the variable to perform the calculation on
\item \verb{by=} is a string indicating the by variable from \verb{tbl_summary=}, if present
\item \verb{tbl=} the original \code{tbl_summary()}/\code{tbl_svysummary()} object is also available to utilize
}
}

The user-defined does not need to utilize each of these inputs. It's
encouraged the user-defined function accept \code{...} as each of the arguments
\emph{will} be passed to the function, even if not all inputs are utilized by
the user's function, e.g. \code{foo(data, variable, by, ...)}
}

\section{Example Output}{

\if{html}{Example 1}

\if{html}{\figure{add_stat_ex1.png}{options: width=60\%}}

\if{html}{Example 2}

\if{html}{\figure{add_stat_ex2.png}{options: width=60\%}}

\if{html}{Example 3}

\if{html}{\figure{add_stat_ex3.png}{options: width=60\%}}
}

\examples{
library(dplyr); library(stringr)
# Example 1 ----------------------------------
# fn returns t-test pvalue
my_ttest <- function(data, variable, by, ...) {
  t.test(data[[variable]] ~ as.factor(data[[by]]))$p.value
}

add_stat_ex1 <-
  trial \%>\%
  select(trt, age, marker) \%>\%
  tbl_summary(by = trt, missing = "no") \%>\%
  add_stat(
    fns = everything() ~ my_ttest, # all variables compared with with t-test
    fmt_fun = style_pvalue,        # format result with style_pvalue()
    header = "**My p-value**",     # new column header
    footnote = "Welch's two-sample t-test"
  ) \%>\%
  modify_header(all_stat_cols() ~ "**{level}**")

# Example 2 ----------------------------------
# fn returns t-test test statistic and pvalue
my_ttest2 <- function(data, variable, by, ...) {
  t.test(data[[variable]] ~ as.factor(data[[by]])) \%>\%
    broom::tidy() \%>\%
    mutate(
      stat = str_glue("t={style_sigfig(statistic)}, {style_pvalue(p.value, prepend_p = TRUE)}")
    ) \%>\%
    pull(stat)
}

add_stat_ex2 <-
  trial \%>\%
  select(trt, age, marker) \%>\%
  tbl_summary(by = trt, missing = "no") \%>\%
  add_stat(
    fns = everything() ~ my_ttest2,    # all variables will be compared by t-test
    fmt_fun = NULL, # fn returns and chr, so no formatting function needed
    header = "**Treatment Comparison**"       # column header
  )

# Example 3 ----------------------------------
# return test statistic and p-value is separate columns
my_ttest3 <- function(data, variable, by, ...) {
  t.test(data[[variable]] ~ as.factor(data[[by]])) \%>\%
    broom::tidy() \%>\%
    select(statistic, p.value)
}

add_stat_ex3 <-
  trial \%>\%
  select(trt, age, marker) \%>\%
  tbl_summary(by = trt, missing = "no") \%>\%
  add_stat(
    fns = everything() ~ my_ttest3,    # all variables will be compared by t-test
    fmt_fun = list(style_sigfig, style_pvalue),
    header = c("**t-statistic**", "**p-value**")       # column header
  )

}
