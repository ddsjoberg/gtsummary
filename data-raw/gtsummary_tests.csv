class,add_p,add_difference,diff_statistic,test_package,test_name,test_fun,fun_to_run,accept_dots,pseudo_code,description,details
tbl_summary,TRUE,TRUE,mean difference,stats,t.test,stats::t.test,gtsummary:::add_p_test_t.test,TRUE,"t.test(variable ~ as.factor(by), data = data, conf.level = 0.95, ...)",t-test,
tbl_summary,TRUE,FALSE,,stats,aov,stats::aov,gtsummary:::add_p_test_aov,FALSE,"aov(variable ~ as.factor(by), data = data) %>% summary()",One-way ANOVA,
tbl_summary,TRUE,FALSE,,stats,mood.test,stats::mood.test,gtsummary:::add_p_test_mood.test,TRUE,"mood.test(variable ~ as.factor(by), data = data, ...) ",Mood two-sample test of scale,Not to be confused with the Brown-Mood test of medians
tbl_summary,TRUE,FALSE,,stats,oneway.test,stats::oneway.test,gtsummary:::add_p_test_oneway.test,TRUE,"oneway.test(variable ~ as.factor(by), data = data, ...) ",One-way ANOVA,
tbl_summary,TRUE,FALSE,,stats,kruskal.test,stats::kruskal.test,gtsummary:::add_p_test_kruskal.test,FALSE,"kruskal.test(data[[variable]], as.factor(data[[by]]))",Kruskal-Wallis test,
tbl_summary,TRUE,TRUE,,stats,wilcox.test,stats::wilcox.test,gtsummary:::add_p_test_wilcox.test,TRUE,"wilcox.test(as.numeric(variable) ~ as.factor(by), data = data, conf.int = TRUE, conf.level = conf.level,  ...)",Wilcoxon rank-sum test,
tbl_summary,TRUE,FALSE,,stats,chisq.test,stats::chisq.test,gtsummary:::add_p_test_chisq.test,TRUE,"chisq.test(x = data[[variable]], y = as.factor(data[[by]]), ...)",chi-square test of independence,
tbl_summary,TRUE,FALSE,,stats,chisq.test.no.correct,,gtsummary:::add_p_test_chisq.test.no.correct,FALSE,"chisq.test(x = data[[variable]], y = as.factor(data[[by]]), correct = FALSE)",chi-square test of independence,
tbl_summary,TRUE,FALSE,,stats,fisher.test,stats::fisher.test,gtsummary:::add_p_test_fisher.test,TRUE,"fisher.test(data[[variable]], as.factor(data[[by]]), conf.level = 0.95, ...)",Fisher's exact test,
tbl_summary,TRUE,FALSE,,stats,mcnemar.test,stats::mcnemar.test,gtsummary:::add_p_test_mcnemar.test,TRUE,"tidyr::pivot_wider(id_cols = group, ...); mcnemar.test(by_1, by_2, conf.level = 0.95, ...)",McNemar's test,
tbl_summary,TRUE,FALSE,,stats,mcnemar.test.wide,,gtsummary:::add_p_test_mcnemar.test_wide,TRUE,"mcnemar.test(data[[variable]], data[[by]], conf.level = 0.95, ...)",McNemar's test,
tbl_summary,TRUE,FALSE,,lme4,lme4,lme4::glmer,gtsummary:::add_p_test_lme4,FALSE,"lme4::glmer(by ~ (1 \UFF5C group), data, family = binomial) %>% anova(lme4::glmer(by ~ variable + (1 \UFF5C group), data, family = binomial))",random intercept logistic regression,
tbl_summary,TRUE,TRUE,mean difference,stats,paired.t.test,,gtsummary:::add_p_tbl_summary_paired.t.test,TRUE,"tidyr::pivot_wider(id_cols = group, ...); t.test(by_1, by_2, paired = TRUE, conf.level = 0.95, ...)",Paired t-test,
tbl_summary,TRUE,FALSE,,stats,paired.wilcox.test,,gtsummary:::add_p_tbl_summary_paired.wilcox.test,TRUE,"tidyr::pivot_wider(id_cols = group, ...); wilcox.test(by_1, by_2, paired = TRUE, conf.int = TRUE, conf.level = 0.95, ...)",Paired Wilcoxon rank-sum test,
tbl_summary,TRUE,TRUE,rate difference,stats,prop.test,stats::prop.test,gtsummary:::add_p_test_prop.test,TRUE,"prop.test(x, n, conf.level = 0.95, ...)",Test for equality of proportions,
tbl_summary,TRUE,TRUE,mean difference,stats,ancova,,gtsummary:::add_p_test_ancova,FALSE,lm(variable ~ by + adj.vars),ANCOVA,
tbl_summary,FALSE,TRUE,mean difference,stats,ancova_lme4,,gtsummary:::add_p_test_ancova_lme4,FALSE,"lme4::lmer(variable ~ by + adj.vars + (1 \UFF5C group), data)",ANCOVA with random intercept,
tbl_summary,FALSE,TRUE,standardized mean difference,effectsize,cohens_d,effectsize::cohens_d,gtsummary:::add_p_test_cohens_d,TRUE,"effectsize::cohens_d(variable ~ by, data, ci = conf.level, verbose = FALSE, ...)",Cohen's D,
tbl_summary,FALSE,TRUE,standardized mean difference,effectsize,hedges_g,effectsize::hedges_g,gtsummary:::add_p_test_hedges_g,TRUE,"effectsize::hedges_g(variable ~ by, data, ci = conf.level, verbose = FALSE, ...)",Hedge's G,
tbl_summary,FALSE,TRUE,standardized mean difference,effectsize,paired_cohens_d,,gtsummary:::add_p_test_paired_cohens_d,TRUE,"tidyr::pivot_wider(id_cols = group, ...); effectsize::cohens_d(by_1, by_2, paired = TRUE, conf.level = 0.95, verbose = FALSE, ...)",Paired Cohen's D,
tbl_summary,FALSE,TRUE,standardized mean difference,effectsize,paired_hedges_g,,gtsummary:::add_p_test_paired_hedges_g,TRUE,"tidyr::pivot_wider(id_cols = group, ...); effectsize::hedges_g(by_1, by_2, paired = TRUE, conf.level = 0.95, verbose = FALSE, ...)",Paired Hedge's G,
tbl_summary,FALSE,TRUE,standardized mean difference,smd,smd,,gtsummary:::add_p_test_smd,FALSE,"smd::smd(x = data[[variable]], g = data[[by]], std.error = TRUE)",Standardized Mean Difference,
tbl_summary,TRUE,TRUE,adjusted mean difference,emmeans,emmeans,emmeans::emmeans,gtsummary:::add_p_test_emmeans,FALSE,"lm(variable ~ by + adj.vars, data) %>% emmeans::emmeans(specs =~by) %>% emmeans::contrast(method = ""pairwise"") %>% summary(infer = TRUE, level = conf.level)",Estimated Marginal Means or LS-means,"When variable is binary, `glm(family = binomial)` and `emmeans(regrid = ""response"")` arguments are used. When `group` is specified, `lme4::lmer()` and `lme4::glmer()` are used with the group as a random intercept."
tbl_svysummary,FALSE,TRUE,standardized mean difference,smd,smd,,gtsummary:::add_p_test_smd,FALSE,"smd::smd(x = data$variables[[variable]], g = data$variables[[by]], w = weights(data),  std.error = TRUE)",Standardized Mean Difference,
tbl_svysummary,TRUE,FALSE,,survey,svy.t.test,survey::svyttest,gtsummary:::add_p_test_svy.t.test,FALSE,"survey::svyttest(~variable + by, data)",t-test adapted to complex survey samples,
tbl_svysummary,TRUE,FALSE,,survey,svy.wilcox.test,survey::svyranktest,gtsummary:::add_p_test_svy.wilcox.test,FALSE,"survey::svyranktest(~variable + by, data, test = 'wilcoxon')",Wilcoxon rank-sum test for complex survey samples,
tbl_svysummary,TRUE,FALSE,,survey,svy.kruskal.test,,gtsummary:::add_p_test_svy.kruskal.test,FALSE,"survey::svyranktest(~variable + by, data, test = 'KruskalWallis')",Kruskal-Wallis rank-sum test for complex survey samples,
tbl_svysummary,TRUE,FALSE,,survey,svy.vanderwaerden.test,,gtsummary:::add_p_test_svy.vanderwaerden.test,FALSE,"survey::svyranktest(~variable + by, data, test = 'vanderWaerden')",van der Waerden's normal-scores test for complex survey samples,
tbl_svysummary,TRUE,FALSE,,survey,svy.median.test,,gtsummary:::add_p_test_svy.median.test,FALSE,"survey::svyranktest(~variable + by, data, test = 'median')",Mood's test for the median for complex survey samples,
tbl_svysummary,TRUE,FALSE,,survey,svy.chisq.test,survey::svychisq,gtsummary:::add_p_test_svy.chisq.test,FALSE,"survey::svychisq(~variable + by, data, statistic = 'F')",chi-squared test with Rao & Scott's second-order correction,
tbl_svysummary,TRUE,FALSE,,survey,svy.adj.chisq.test,,gtsummary:::add_p_test_svy.adj.chisq.test,FALSE,"survey::svychisq(~variable + by, data, statistic = 'Chisq')",chi-squared test adjusted by a design effect estimate,
tbl_svysummary,TRUE,FALSE,,survey,svy.wald.test,,gtsummary:::add_p_test_svy.wald.test,FALSE,"survey::svychisq(~variable + by, data, statistic = 'Wald')",Wald test of independence for complex survey samples,
tbl_svysummary,TRUE,FALSE,,survey,svy.adj.wald.test,,gtsummary:::add_p_test_svy.adj.wald.test,FALSE,"survey::svychisq(~variable + by, data, statistic = 'adjWald')",adjusted Wald test of independence for complex survey samples,
tbl_svysummary,TRUE,FALSE,,survey,svy.lincom.test,,gtsummary:::add_p_test_svy.lincom.test,FALSE,"survey::svychisq(~variable + by, data, statistic = 'lincom')",test of independence using the exact asymptotic distribution for complex survey samples,
tbl_svysummary,TRUE,FALSE,,survey,svy.saddlepoint.test,,gtsummary:::add_p_test_svy.saddlepoint.test,FALSE,"survey::svychisq(~variable + by, data, statistic = 'saddlepoint')",test of independence using a saddlepoint approximation for complex survey samples,
tbl_svysummary,TRUE,TRUE,adjusted mean difference,emmeans,emmeans,emmeans::emmeans,gtsummary:::add_p_test_emmeans,FALSE,"survey::svyglm(variable ~ by + adj.vars, data) %>% emmeans::emmeans(specs =~by) %>% emmeans::contrast(method = ""pairwise"") %>% summary(infer = TRUE, level = conf.level)",Estimated Marginal Means or LS-means,"When variable is binary, `survey::svyglm(family = binomial)` and `emmeans(regrid = ""response"")` arguments are used."
tbl_survfit,TRUE,FALSE,,survival,logrank,,gtsummary:::add_p_tbl_survfit_logrank,FALSE,"survival::survdiff(Surv(.) ~ variable, data, rho = 0)",Log-rank test,
tbl_survfit,TRUE,FALSE,,survival,tarone,,gtsummary:::add_p_tbl_survfit_tarone,FALSE,"survival::survdiff(Surv(.) ~ variable, data, rho = 1.5)",Tarone-Ware test,
tbl_survfit,TRUE,FALSE,,survival,petopeto_gehanwilcoxon,,gtsummary:::add_p_tbl_survfit_petopeto_gehanwilcoxon,FALSE,"survival::survdiff(Surv(.) ~ variable, data, rho = 1)",Peto & Peto modification of Gehan-Wilcoxon test,
tbl_survfit,TRUE,FALSE,,survival,survdiff,survival::survdiff,gtsummary:::add_p_tbl_survfit_survdiff,TRUE,"survival::survdiff(Surv(.) ~ variable, data, ...)",G-rho family test,
tbl_survfit,TRUE,FALSE,,survival,coxph_lrt,survival::coxph,"purrr::partial(gtsummary:::add_p_tbl_survfit_coxph, test_type = ""log"")",TRUE,"survival::coxph(Surv(.) ~ variable, data, ...)",Cox regression (LRT),
tbl_survfit,TRUE,FALSE,,survival,coxph_wald,,"purrr::partial(gtsummary:::add_p_tbl_survfit_coxph, test_type = ""wald"")",TRUE,"survival::coxph(Surv(.) ~ variable, data, ...)",Cox regression (Wald),
tbl_survfit,TRUE,FALSE,,survival,coxph_score,,"purrr::partial(gtsummary:::add_p_tbl_survfit_coxph, test_type = ""sc"")",TRUE,"survival::coxph(Surv(.) ~ variable, data, ...)",Cox regression (Score),
tbl_continuous,TRUE,FALSE,,stats,anova_2way,,gtsummary:::add_p_test_anova_2way,FALSE,lm(continuous_variable ~ by + variable),Two-way ANOVA,
tbl_continuous,TRUE,TRUE,,stats,t.test,stats::t.test,"purrr::partial(gtsummary:::add_p_test_tbl_summary_to_tbl_continuous, test_name = ""t.test"")",TRUE,"t.test(continuous_variable ~ as.factor(variable), data = data, conf.level = 0.95, ...)",t-test,
tbl_continuous,TRUE,FALSE,,stats,aov,stats::aov,"purrr::partial(gtsummary:::add_p_test_tbl_summary_to_tbl_continuous, test_name = ""aov"")",FALSE,"aov(continuous_variable ~ as.factor(variable), data = data) %>% summary()",One-way ANOVA,
tbl_continuous,TRUE,FALSE,,stats,kruskal.test,stats::kruskal.test,"purrr::partial(gtsummary:::add_p_test_tbl_summary_to_tbl_continuous, test_name = ""kruskal.test"")",FALSE,"kruskal.test(data[[continuous_variable]], as.factor(data[[variable]]))",Kruskal-Wallis test,
tbl_continuous,TRUE,FALSE,,stats,wilcox.test,stats::wilcox.test,"purrr::partial(gtsummary:::add_p_test_tbl_summary_to_tbl_continuous, test_name = ""wilcox.test"")",TRUE,"wilcox.test(as.numeric(continuous_variable) ~ as.factor(variable), data = data, ...)",Wilcoxon rank-sum test,
tbl_continuous,TRUE,FALSE,,lme4,lme4,lme4::glmer,"purrr::partial(gtsummary:::add_p_test_tbl_summary_to_tbl_continuous, test_name = ""lme4"")",FALSE,"lme4::glmer(by ~ (1 \UFF5C group), data, family = binomial) %>% anova(lme4::glmer(variable ~ continuous_variable + (1 \UFF5C group), data, family = binomial))",random intercept logistic regression,
tbl_continuous,TRUE,FALSE,,stats,ancova,,"purrr::partial(gtsummary:::add_p_test_tbl_summary_to_tbl_continuous, test_name = ""ancova"")",FALSE,lm(continuous_variable ~ variable + adj.vars),ANCOVA,
tbl_continuous,FALSE,FALSE,,stats,ancova_lme4,,"purrr::partial(gtsummary:::add_p_test_tbl_summary_to_tbl_continuous, test_name = ""ancova_lme4"")",FALSE,"lme4::lmer(continuous_variable ~ variable + adj.vars + (1 \UFF5C group), data)",ANCOVA with random intercept,